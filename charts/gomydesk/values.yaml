# Default values for gomydesk.
env: dev
appVersion: v0.1.1
# nameOverride -- A name override for resources created by the chart.
nameOverride: ''
# fullnameOverride -- A full name override for resources created by the chart.
fullnameOverride: ''

rbac:
  # rbac.proxy -- RBAC Proxy configurations for the manager deployment
  proxy:
    # rbac.proxy.repository -- The repository to pull the kube-rbac-proxy image from
    repository: gcr.io/kubebuilder/kube-rbac-proxy
    # rbac.proxy.tag -- The tag to pull for the kube-rbac-proxy.
    tag: v0.5.0
  serviceAccount:
    # rbac.serviceAccount.create -- Specifies whether a `ServiceAccount` should be created.
    create: true
    # rbac.serviceAccount.name -- The name of the `ServiceAccount` to use.
    # @default -- If not set and create is true, a name is generated using the fullname template.
    name:

manager:
  # manager.replicaCount -- The number of manager replicas to run.
  # If more than one is set, they will run in active/standby mode.
  replicaCount: 1
  image:
    # manager.image.repository -- The repository and image for the manager.
    repository:
      dev: localhost:5000/gomydesk/manager
      staging: ghcr.io/gomydesk/manager
      prod: ghcr.io/gomydesk/manager
    # manager.image.tag -- The tag for the manager image. Defaults to the chart version.
    tag: ''
    # manager.image.pullPolicy -- The `ImagePullPolicy` to use for the manager pod.
    pullPolicy: IfNotPresent
  # manager.imagePullSecrets -- Image pull secrets for the manager pod.
  imagePullSecrets: []
  # manager.podSecurityContext -- The `PodSecurityContext` for the manager pod.
  podSecurityContext: {}
  # manager.securityContext -- The container security context for the manager pod.
  securityContext: {}
  # manager.resources -- Resource limits for the manager pod.
  resources: {}
  # manager.nodeSelector -- Node selectors for the manager pod.
  nodeSelector: {}
  # manager.tolerations -- Node tolerations for the manager pod.
  tolerations: []
  # manager.affinity -- Node affinity for the manager pod.
  affinity: {}
ingress:
  enabled:
    dev: false
    staging: true
    prod: true
  hostname:
    staging: desktop-staging.gomydesk.com
    prod: desktop.gomydesk.com
  ingressClassName: nginx
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: 'HTTPS'
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
  tls: true

vdi:
  # vdi.labels -- Extra labels to apply to gomydesk related resources.
  labels:
    component: gomydesk-cluster
  # vdi.spec -- The `VDICluster` spec.
  # @default -- The values described below are the same as the `VDICluster` CRD defaults.
  spec:
    # vdi.spec.appNamespace -- The namespace where the `gomydesk` app will run.
    # This is different than the chart namespace. The chart lays down the manager
    # and a VDI configuration, and the manager takes care of the rest.
    appNamespace: default
    # vdi.spec.imagePullSecrets -- Image pull secrets to use for app containers.
    imagePullSecrets: []
    # vdi.spec.userdataSpec -- If configured, enables userdata persistence with
    # the given PVC spec. Every user will receive their own PV with the provided configuration.
    userdataSpec:
      storageClassName:
        dev: standard
        staging: efs-sc
        prod: efs-sc

    # vdi.spec.app -- App level configurations for `gomydesk`.
    # @default -- The values described below are the same as the `VDICluster` CRD defaults.
    app:
      # vdi.spec.app.image -- The image to use for app pods.
      # @default -- `ghcr.io/gomydesk/app:${VERSION}`
      image:
        dev: 'localhost:5000/gomydesk/app'
        staging: 'ghcr.io/gomydesk/app'
        prod: 'ghcr.io/gomydesk/app'

      # vdi.spec.app.replicas -- The number of app replicas to run.
      replicas:
        dev: 1
        staging: 1
        prod: 1
      # vdi.spec.app.serviceType -- The type of service to create in front of the app instance.
      serviceType: ClusterIP
      # vdi.spec.app.serviceAnnotations -- Extra annotations to place on the gomydesk app service.

  # vdi.templates -- Preload DesktopTemplates into the VDI Cluster. You only need to define
  # the `metadata` and `spec`. Namespaces can be ignored sinced DesktopTemplates are cluster-scoped.
  templates: []
