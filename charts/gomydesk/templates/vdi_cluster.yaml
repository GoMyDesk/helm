{{- $user_data_storage_class_name := index $.Values.vdi.spec.userdataSpec.storageClassName $.Values.env }}
{{- if not $user_data_storage_class_name }}{{ fail (printf "user_data_storage_class_name info required: %s" $.Values.env) }}{{ end -}}

{{- $manager_repo := index $.Values.manager.image.repository $.Values.env }}

{{- $app_repo := index $.Values.vdi.spec.app.image $.Values.env }}
{{- $app_image_version := index $.Values.appVersion }}
{{- $app_image := printf "%s:%s" $app_repo $app_image_version -}}

{{- $replicas := index $.Values.vdi.spec.app.replicas $.Values.env }}
{{- if not $replicas }}{{ fail (printf "replicas info required: %s" $.Values.env) }}{{ end -}}

apiVersion: app.gomydesk.io/v1
kind: VDICluster
metadata:
  name: gomydesk
  labels:
    {{-  toYaml .Values.vdi.labels | nindent 4 }}
spec:
    # vdi.spec.appNamespace -- The namespace where the `gomydesk` app will run.
    # This is different than the chart namespace. The chart lays down the manager
    # and a VDI configuration, and the manager takes care of the rest.
    appNamespace: {{ .Values.vdi.spec.appNamespace }}
    # vdi.spec.imagePullSecrets -- Image pull secrets to use for app containers.
    imagePullSecrets: []
    # vdi.spec.userdataSpec -- If configured, enables userdata persistence with
    # the given PVC spec. Every user will receive their own PV with the provided configuration.
    userdataSpec:
      storageClassName: {{ $user_data_storage_class_name }}
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 1G
    # vdi.spec.app -- App level configurations for `gomydesk`.
    # @default -- The values described below are the same as the `VDICluster` CRD defaults.
    app:
      # vdi.spec.app.image -- The image to use for app pods.
      # @default -- `ghcr.io/gomydesk/app:${VERSION}`
      image: {{ $app_image }}
      # vdi.spec.app.corsEnabled -- Enables CORS headers in API responses.
      corsEnabled: true

      # vdi.spec.app.auditLog -- Enables a detailed audit log of API events.
      # At the moment, these just get logged to stdout on the app instance.
      auditLog: true
      # vdi.spec.app.replicas -- The number of app replicas to run.
      replicas: {{ $replicas }}
      # vdi.spec.app.serviceType -- The type of service to create in front of the app instance.
      serviceType: ClusterIP
      # vdi.spec.app.serviceAnnotations -- Extra annotations to place on the gomydesk app service.
      serviceAnnotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8443'
        prometheus.io/path: '/api/metrics'
        prometheus.io/scheme: 'https'
      # vdi.spec.app.tls -- TLS configurations for the app instance.
      tls:
        # vdi.spec.app.tls.serverSecret -- A pre-existing TLS secret to use for the HTTPS listener on the app instance.
        # If not provided, one is generated for you.
        serverSecret: ''
      # vdi.spec.app.resources -- Resource limits for the app pods.
      resources: {}
    # vdi.spec.metrics -- Metrics configurations for `gomydesk`.
    metrics:
      # vdi.spec.metrics.serviceMonitor -- Configurations for creating a ServiceMonitor object to
      # scrape `gomydesk` metrics.
      serviceMonitor:
        # vdi.spec.metrics.serviceMonitor.create -- Set to true to have `gomydesk` create a ServiceMonitor.
        # There is an example dashboard in the [examples](../../examples/example-grafana-dashboard.json) directory.
        create: false
        # vdi.spec.metrics.serviceMonitor.labels -- Extra labels to apply to the ServiceMonitor object.
        labels:
          release: prometheus
      prometheus:
        create: false
      grafana:
        enabled: false
    # vdi.spec.auth -- Authentication configurations for `gomydesk`.
    # @default -- The values described below are the same as the `VDICluster` CRD defaults.
    auth:
      # vdi.spec.auth.allowAnonymous -- Allow anonymous users to launch and use desktops.
      allowAnonymous: false
      # vdi.spec.auth.adminSecret -- The secret to store the generated admin password in.
      adminSecret: gomydesk-admin-secret
      # vdi.spec.auth.tokenDuration -- The time-to-live for access tokens issued to users.
      # If using OIDC/Oauth, you probably want to set this to a higher value, since refreshing
      # tokens is currently not supported.
      tokenDuration: '15m'
      # vdi.spec.auth.localAuth -- Use local-auth for the authentication backend. This is the default configuration.
      localAuth: {}
      # vdi.spec.auth.ldapAuth -- (object) Use an LDAP server for the authentication backend. See the [API reference](../../../doc/crds.md#LDAPConfig) for available configurations.
      ldapAuth: {}
      # vdi.spec.auth.oidcAuth -- (object) Use an OpenID/Oauth provider for the authentication backend. See the [API reference](../../../doc/crds.md#OIDCConfig) for available configurations.
      oidcAuth: {}
    # vdi.spec.secrets -- Secret storage configurations for `gomydesk`.
    # @default -- The values described below are the same as the `VDICluster` CRD defaults.
    secrets:
      # vdi.spec.secrets.k8sSecret -- Use the Kubernetes secret storage backend. This is the default
      # if no other configuration is provided. For now, see the API reference for what to
      # use in place of these values if using a different backend.
      k8sSecret:
        # vdi.spec.secrets.k8sSecret.secretName -- The name of the Kubernetes `Secret`.
        # backing the secret storage.
        secretName: gomydesk-app-secrets
      # vdi.spec.secrets.vault -- (object) Use vault for the secret storage backend. See the [API reference](../../../doc/crds.md#VaultConfig) for available configurations.
      vault: {}
    # vdi.spec.desktops -- Global configurations for desktop sessions.
    desktops:
      # vdi.spec.desktops.maxSessionLength -- When configured, desktop sessions will be terminated after running
      # for the specified period of time. Values are in duration formats (e.g. `3m`, `2h`, `1d`).
      maxSessionLength: ''

{{ range $idx, $tmpl := .Values.vdi.templates }}
---
apiVersion: desktops.gomydesk.io/v1
kind: Template
metadata:
  {{ toYaml $tmpl.metadata | nindent 2 }}
spec:
  {{ toYaml $tmpl.spec | nindent 2 }}
{{ end }}